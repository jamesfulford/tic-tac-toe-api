<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TicTacToe</name>
    </assembly>
    <members>
        <member name="T:TicTacToe.Controllers.Controller">
            <summary>
            Plays a turn of Tic Tac Toe given the current board state.
            </summary>
        </member>
        <member name="M:TicTacToe.Controllers.Controller.Post">
            <summary>
            Plays a turn of Tic Tac Toe given the current board state.
            Body is a JSON object with a startBoard attribute, whose value is a list of 9 strings representing the current game state. Acceptable strings are either a player symbol ("X"|"O") or "?" if empty.
            </summary>
            <returns>A new board state.</returns>
        </member>
        <member name="T:TicTacToe.Models.Board">
            <summary>
            Structure representing a given Tic Tac Toe board's state.
            </summary>
        </member>
        <member name="F:TicTacToe.Models.Board.X">
            <summary>
            A position symbol indicating player X has placed in a position. Is also a player symbol. Is also a win-state indicating this player is the winner.
            </summary>
        </member>
        <member name="F:TicTacToe.Models.Board.O">
            <summary>
            A position symbol indicating player O has placed in a position. Is also a player symbol. Is also a win-state indicating this player is the winner.
            </summary>
        </member>
        <member name="F:TicTacToe.Models.Board.EMPTY">
            <summary>
            A position symbol indicating no player has placed in a position. Unlike X and O, EMPTY is not a player symbol.
            </summary>
        </member>
        <member name="F:TicTacToe.Models.Board.INCONCLUSIVE">
            <summary>
            A win-state indicating an unfinished game with no winner.
            </summary>
        </member>
        <member name="F:TicTacToe.Models.Board.TIE">
            <summary>
            A win-state indicating a finished game with no winner.
            </summary>
        </member>
        <member name="F:TicTacToe.Models.Board.winningIndexes">
            <summary>
            WinningIndexes is a list of index lists which produce a win in Tic Tac Toe.
            For instance, the element [0, 1, 2] of WinningIndexes means that if a player plays in all of the top 3 positions of the board, they win.
            </summary>
            <value></value>
        </member>
        <member name="F:TicTacToe.Models.Board.gameBoard">
            <summary>
            A list of 9 position symbols ("X"|"O"|"?"), corresponding to the current state of a Tic Tac Toe board.
            Indices in this list correspond to a game board left-to-right, then top-to-bottom:
              0 1 2
              3 4 5
              6 7 8
            </summary>
        </member>
        <member name="M:TicTacToe.Models.Board.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            A constructor for a Tic Tac Toe board state.
            </summary>
            <param name="gameBoard">A list of 9 player-symbols indicating the current board's state.</param>
        </member>
        <member name="M:TicTacToe.Models.Board.IsValidState">
            <summary>
            Detects whether a board's state is valid.
            Valid boards have 9 symbols, all either "X"|"O"|"?",
            and the difference between "X" and "O" is no more than 1 play.
            </summary>
            <returns>Whether the current gameboard state is valid.</returns>
        </member>
        <member name="M:TicTacToe.Models.Board.WhichPlayersTurn">
            <summary>
            Assuming the current state is waiting for the software to play,
            this method infers which player symbol the software should play as.
            Prefers "X".
            </summary>
            <returns>A player symbol ("X"|"O") believed to belong to this player.</returns>
        </member>
        <member name="M:TicTacToe.Models.Board.GetScenarioState(System.Collections.Generic.List{System.Int32})">
            <summary>
            Given a list of indices, returns the list of position symbols filling those indices.
            </summary>
            <param name="scenario">A list of indices.</param>
            <returns>A list of position symbols ("X"|"O"|"?") corresponding to those indicies.</returns>
        </member>
        <member name="M:TicTacToe.Models.Board.WinningScenario">
            <summary>
            Detects which scenario by which a player won the game, if there is a winner. Used for victory checking.
            </summary>
            <returns>A list of indices which are filled by the same player, indicating a win. If no player has won, returns null.</returns>
        </member>
        <member name="M:TicTacToe.Models.Board.Winner">
            <summary>
            Returns the win-state of the current board.
            </summary>
            <returns>One of "X"|"O"|"tie"|"inconclusive".</returns>
        </member>
        <member name="M:TicTacToe.Models.Board.Play(System.Int32,System.String)">
            <summary>
            Plays the move given.
            </summary>
            <param name="move">The index at which to place a symbol.</param>
            <param name="playerSymbol">The player symbol to place at the given index.</param>
            <returns>A new game state with the given position filled with the given symbol.</returns>
        </member>
        <member name="M:TicTacToe.Models.Board.GetNextMove(System.String)">
            <summary>
            The game heuristic which decides where to play the next move.
            </summary>
            <param name="playerSymbol">The symbol of the software player.</param>
            <returns>The index this software player intends to play.</returns>
        </member>
        <member name="T:TicTacToe.Program">
            <summary>
            A program which runs the Tic Tac Toe API server.
            </summary>
        </member>
        <member name="M:TicTacToe.Program.Main(System.String[])">
            <summary>
            Builds and runs the Tic Tac Toe API server
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:TicTacToe.Program.CreateWebHostBuilder(System.String[])">
            <summary>
            Prepares a default web host builder configuration.
            </summary>
            <param name="args">CLI args to pass to the default builder.</param>
            <returns>An IWebHostBuilder configuration.</returns>
        </member>
        <member name="T:TicTacToe.Startup">
            <summary>
            Defines the configuration of the Web API applicaiton
            </summary>
        </member>
        <member name="M:TicTacToe.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:TicTacToe.Startup" /> class.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="hostingEnvironment">The hosting environment.</param>
        </member>
        <member name="P:TicTacToe.Startup.HostingEnvironment">
            <summary>
            Gets the hosting environment.
            </summary>
            <value>
            The hosting environment.
            </value>
        </member>
        <member name="P:TicTacToe.Startup.Configuration">
            <summary>
            Gets the configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="M:TicTacToe.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:TicTacToe.Startup.ConfigureSwaggerUI(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            SWAGGER: Configures the swagger UI.
            </summary>
            <param name="swaggerGenOptions">The swagger gen options.</param>
        </member>
        <member name="M:TicTacToe.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Configures the specified application.
            </summary>
            <param name="app">The application.</param>
            <param name="env">The env.</param>
        </member>
    </members>
</doc>

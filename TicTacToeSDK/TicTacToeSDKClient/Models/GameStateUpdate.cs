// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace TicTacToeSDK.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Response given by controller containing details on the new state of
    /// the game.
    /// </summary>
    public partial class GameStateUpdate
    {
        /// <summary>
        /// Initializes a new instance of the GameStateUpdate class.
        /// </summary>
        public GameStateUpdate() { }

        /// <summary>
        /// Initializes a new instance of the GameStateUpdate class.
        /// </summary>
        public GameStateUpdate(int? move = default(int?), string azurePlayerSymbol = default(string), string winner = default(string), IList<int?> winPositions = default(IList<int?>), IList<string> gameBoard = default(IList<string>))
        {
            Move = move;
            AzurePlayerSymbol = azurePlayerSymbol;
            Winner = winner;
            WinPositions = winPositions;
            GameBoard = gameBoard;
        }

        /// <summary>
        /// Integer corresponding to index where last play took place.
        /// </summary>
        [JsonProperty(PropertyName = "move")]
        public int? Move { get; set; }

        /// <summary>
        /// Symbol azure assumes to play.
        /// </summary>
        [JsonProperty(PropertyName = "azurePlayerSymbol")]
        public string AzurePlayerSymbol { get; set; }

        /// <summary>
        /// Win-state of game, one of "X"|"O"|"inconclusive"|"tie".
        /// </summary>
        [JsonProperty(PropertyName = "winner")]
        public string Winner { get; set; }

        /// <summary>
        /// Array of positions used by winner to win, if game has been won.
        /// </summary>
        [JsonProperty(PropertyName = "winPositions")]
        public IList<int?> WinPositions { get; set; }

        /// <summary>
        /// Newest state of the gameBoard.
        /// </summary>
        [JsonProperty(PropertyName = "gameBoard")]
        public IList<string> GameBoard { get; set; }

    }
}
